{
  "version": 3,
  "file": "soushians-config.umd.min.js",
  "sources": [
    "ng://@soushians/config/projects/soushians/config/src/lib/actions/config.action.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/config-list.reducer.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/reducers/index.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/app-config/app-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/authentication-module-config/authentication-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/layout-config/layout-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/dumb-components/user-module-config/user-module-config.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.config.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/module-configuration/configuration.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/config.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/get-configs-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/models/edit-config-api.model.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/services/config.service.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-edit/config-edit.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/configs/configs.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/config-module-container/config-module-container.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/smart-components/dynamic-config-component-selector/dynamic-config-component-selector.component.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.routing-module.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/effects/load-config.effects.ts",
    "ng://@soushians/config/projects/soushians/config/src/lib/config.module.ts"
  ],
  "sourcesContent": [
    "import { Action } from '@ngrx/store';\r\nimport { ConfigModel, GetConfigsApiModel } from '../models';\r\n\r\nexport enum ConfigActionTypes {\r\n\tGET_CONFIGS = '[CONFIG] get config',\r\n\tCONFIG_LOADED_SUCCEED = '[CONFIG] load config succeed',\r\n\tCONFIG_LOADED_FAILED = '[CONFIG] load config failed'\r\n}\r\n\r\nexport class GetConfigAction implements Action {\r\n\treadonly type = ConfigActionTypes.GET_CONFIGS;\r\n}\r\n\r\nexport class ConfigLoadedSucceedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_SUCCEED;\r\n\r\n\tconstructor(public payload: ConfigModel<any>[]) {}\r\n}\r\n\r\nexport class ConfigLoadedFailedAction implements Action {\r\n\treadonly type = ConfigActionTypes.CONFIG_LOADED_FAILED;\r\n}\r\nexport type Actions = GetConfigAction | ConfigLoadedSucceedAction | ConfigLoadedFailedAction;\r\n",
    "import * as config from \"../actions/config.action\";\r\nimport { ConfigModel, LayoutConfigModel } from \"../models\";\r\n\r\nexport interface State {\r\n\tdata: any[];\r\n}\r\n\r\nconst initialState: State = {\r\n\tdata: []\r\n};\r\n\r\nexport function Reducer(state = initialState, action: config.Actions): State {\r\n\tswitch (action.type) {\r\n\t\tcase config.ConfigActionTypes.CONFIG_LOADED_SUCCEED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: action.payload\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const getConfigs = (state: State) => state.data;\r\nexport const getAppConfig = (state: State) => state.data.find((config) => config.Name == \"app_config\");\r\nexport const getAuthenticationModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"authentication_module_config\");\r\nexport const getUserModuleConfig = (state: State) => state.data.find((config) => config.Name == \"user_module_config\");\r\nexport const getlayoutModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"layout_config\") as any;\r\nexport const getConfigModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"config_module_config\") as any;\r\nexport const getFormModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"form_module_config\") as any;\r\nexport const getSocketModuleConfig = (state: State) =>\r\n\tstate.data.find((config) => config.Name == \"socket_module_config\") as any;\r\n",
    "import { createSelector, createFeatureSelector, MemoizedSelector } from \"@ngrx/store\";\r\n\r\nimport * as configList from \"./config-list.reducer\";\r\nimport { ConfigLoadedFailedAction, ConfigLoadedSucceedAction } from \"../actions\";\r\nexport interface ConfigState {\r\n\tlist: configList.State;\r\n}\r\nConfigLoadedFailedAction;\r\nexport const ConfigReducers = {\r\n\tlist: configList.Reducer\r\n};\r\n\r\nexport interface FeatureState {\r\n\t\"configs\": ConfigState;\r\n}\r\n\r\n//#region selectors\r\n\r\nexport const selectConfigState = createFeatureSelector<ConfigState>(\"config\");\r\n\r\n//#endregion\r\n\r\nexport const getConfigListState = createSelector(selectConfigState, (state: ConfigState) => state.list);\r\nexport const getConfigs = createSelector(getConfigListState, configList.getConfigs);\r\nexport const getAppConfig = createSelector(getConfigListState, configList.getAppConfig);\r\nexport const getAuthenticationModuleConfig = createSelector(\r\n\tgetConfigListState,\r\n\tconfigList.getAuthenticationModuleConfig\r\n);\r\nexport const getUserModuleConfig = createSelector(getConfigListState, configList.getUserModuleConfig);\r\nexport const getlayoutModuleConfig = createSelector(getConfigListState, configList.getlayoutModuleConfig);\r\nexport const getConfigModuleConfig = createSelector(getConfigListState, configList.getConfigModuleConfig);\r\nexport const getFormModuleConfig = createSelector(getConfigListState, configList.getFormModuleConfig);\r\nexport const getSocketModuleConfig = createSelector(getConfigListState, configList.getSocketModuleConfig);\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { EditConfigApiModel } from \"../../models\";\r\nimport { ConfigService } from \"../../services\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { UtilityService } from \"@soushians/infra\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n\tselector: \"config-app-config\",\r\n\ttemplate: `<div [formGroup]=\"formGroup\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"نام پروژه\" formControlName=\"AppTitle\">\r\n    </mat-form-field>\r\n</div>`\r\n})\r\nexport class ConfigAppConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({ AppTitle: new FormControl(\"\", [ Validators.required ]) });\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe(data => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel } from \"../../models\";\r\nimport { ConfigService } from \"../../services\";\r\nimport { UtilityService } from \"@soushians/infra\";\r\n\r\n@Component({\r\n\tselector: \"config-authentication-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.controls.endpoints\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign in\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"sign out\" formControlName=\"signOut\">\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"user information\" formControlName=\"userInformation\">\r\n    </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.controls.forms\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"SignIn Forms\" formControlName=\"signIn\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>`\r\n})\r\nexport class AuthenticationModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tsignOut: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tuserInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tsignIn: new FormControl(\"\", [ Validators.required ])\r\n\t\t})\r\n\t});\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\tsetFormId(formId: string, formName: string) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.patchValue({ [formName]: formId });\r\n\t}\r\n}\r\n",
    "import { Component, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\n\r\n@Component({\r\n\ttemplate: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n    <div fxFlex=\"100\" fxFlexLayout=\"row\">\r\n        <div [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"layout mode\" formControlName=\"layoutMode\" >\r\n                    <mat-option *ngFor=\"let item of layoutModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showLeftNavBar\">show left navbar</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"main side nav mode\" formControlName=\"mainSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showMainSidenav\">show main side nav</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"stickyLeftNavBar\">sticky left navbar</mat-slide-toggle>\r\n            <mat-slide-toggle  (change)=\"configChanged.emit(formGroup.value)\"  formControlName=\"showSecondSideNav\">show second side nav</mat-slide-toggle>\r\n            <mat-form-field>\r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"second side nav mode\" formControlName=\"secondSideNavMode\" >\r\n                    <mat-option *ngFor=\"let item of sideNavModes\" [value]=\"item\">{{item}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <h2 fxFlex=\"100\">\r\n        Menu Items\r\n        <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n            <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n        </button>\r\n    </h2>\r\n    <div fxFlex=\"100\" *ngFor=\"let item of formGroup.controls.menuItems.controls\">\r\n        <div [formGroup]=\"item\">\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n            </mat-form-field>\r\n            <mat-form-field> \r\n                <mat-select (change)=\"configChanged.emit(formGroup.value)\" placeholder=\"roles\" formControlName=\"roles\" multiple>\r\n                    <mat-option *ngFor=\"let role of roleItems\" [value]=\"role\">{{role}}</mat-option>\r\n                </mat-select> \r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n</div>`\r\n})\r\nexport class LayoutModuleConfigComponent {\r\n\tsideNavModes: string[];\r\n\tlayoutModes: string[];\r\n\tformGroup: any = new FormGroup({\r\n\t\tlayoutMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmainSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowMainSidenav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tstickyLeftNavBar: new FormControl(\"\", [ Validators.required ]),\r\n\t\tshowSecondSideNav: new FormControl(\"\", [ Validators.required ]),\r\n\t\tsecondSideNavMode: new FormControl(\"\", [ Validators.required ]),\r\n\t\tmenuItems: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.menuItems as FormArray).controls.forEach((control) => {\r\n\t\t\t(this.formGroup.controls.menuItems as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\t// roles: new FormArray(control.value.roles.map((i) => new FormControl(\"Admin\"))),\r\n\t\t\t\t\troles: new FormControl(),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => this.formGroup.patchValue(data));\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\r\n\troleItems: string[] = [ \"Admin\", \"User\" ];\r\n\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.sideNavModes = [ \"over\", \"push\", \"side\" ];\r\n\t\tthis.layoutModes = [ \"with-margin\", \"without-margin\", \"default\" ];\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\troles: new FormControl(),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"menuItems\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, Injector } from \"@angular/core\";\r\nimport { FormGroup, Validators, FormControl, FormArray } from \"@angular/forms\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { EditConfigApiModel } from \"../../models\";\r\nimport { ConfigService } from \"../../services\";\r\nimport { UtilityService } from \"@soushians/infra\";\r\n\r\n@Component({\r\n\tselector: \"config-user-module-config\",\r\n\ttemplate: `<h2>Endpoints</h2>\r\n<div [formGroup]=\"formGroup.get('endpoints')\" fxLayout=\"column\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"change password\" formControlName=\"changePassword\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"edit profile\" formControlName=\"editProfile\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"get user info\" formControlName=\"getUserInfo\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"Profile Information Endpoint\" formControlName=\"profileInformation\">\r\n        </mat-form-field>\r\n</div>\r\n<h2>Forms</h2>\r\n<div [formGroup]=\"formGroup.get('forms')\" fxLayout=\"column\">\r\n    <mat-form-field>\r\n        <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"profile edit\" formControlName=\"profile_edit\">\r\n    </mat-form-field>\r\n            <!-- <ngs-form-selector (select)=\"setFormId($event,'signIn')\"></ngs-form-selector> -->\r\n</div>\r\n\r\n\r\n<h2 fxFlex=\"100\">\r\n    Dashobard Links\r\n    <button mat-icon-button color=\"primary\" (click)=\"addMenu()\">\r\n        <mat-icon aria-label=\"icon-button icon\">add</mat-icon>\r\n    </button>\r\n</h2>\r\n<div fxFlex=\"100\" *ngFor=\"let item of $any(formGroup.get('dashboardLinks')).controls\">\r\n    <div [formGroup]=\"item\">\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"route\" formControlName=\"route\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"icon\" formControlName=\"icon\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input type=\"text\" (change)=\"configChanged.emit(formGroup.value)\" matInput placeholder=\"title\" formControlName=\"title\">\r\n        </mat-form-field>\r\n    </div>\r\n</div>`\r\n})\r\nexport class UserModuleConfigComponent {\r\n\tformGroup: FormGroup = new FormGroup({\r\n\t\tendpoints: new FormGroup({\r\n\t\t\tchangePassword: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\teditProfile: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tgetUserInfo: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\tprofileInformation: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tforms: new FormGroup({\r\n\t\t\tprofile_edit: new FormControl(\"\", [ Validators.required ])\r\n\t\t}),\r\n\t\tdashboardLinks: new FormArray([])\r\n\t});\r\n\t_configFormGroup: FormGroup;\r\n\t@Input()\r\n\tset configFormGroup(configFormGroup: FormGroup) {\r\n\t\tthis._configFormGroup = configFormGroup;\r\n\t\t(configFormGroup.controls.dashboardLinks as FormArray).controls.forEach((control) => {\r\n\t\t\t(this.formGroup.controls.dashboardLinks as FormArray).push(\r\n\t\t\t\tnew FormGroup({\r\n\t\t\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.formGroup.patchValue(configFormGroup.value);\r\n\t\tconfigFormGroup.valueChanges.subscribe((data) => {\r\n\t\t\tthis.formGroup.patchValue(data);\r\n\t\t});\r\n\t}\r\n\tget configFormGroup() {\r\n\t\treturn this._configFormGroup;\r\n\t}\r\n\t@Output() configChanged = new EventEmitter();\r\n\tconstructor(private injector: Injector) {\r\n\t\tthis.configFormGroup = this.injector.get(\"configFormGroup\");\r\n\t}\r\n\taddMenu() {\r\n\t\tvar menuItem = new FormGroup({\r\n\t\t\troute: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ticon: new FormControl(\"\", [ Validators.required ]),\r\n\t\t\ttitle: new FormControl(\"\", [ Validators.required ])\r\n\t\t});\r\n\r\n\t\t(this.formGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t\t(this.configFormGroup.get(\"dashboardLinks\") as FormArray).push(menuItem);\r\n\t}\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ConfigModuleConfig {\r\n\tdev_api_host?: string;\r\n\tprod_api_host?: string;\r\n\tenv?: {\r\n\t\tproduction: boolean;\r\n\t};\r\n}\r\n\r\nexport const MODULE_DEFAULT_CONFIG: ConfigModuleConfig = {\r\n\tdev_api_host: 'http://localhost:3000',\r\n\tprod_api_host: 'http://5.196.149.107:3000',\r\n\tenv: {\r\n\t\tproduction: false\r\n\t}\r\n};\r\n\r\nexport const MODULE_CONFIG_TOKEN = new InjectionToken<ConfigModuleConfig>('UserModuleConfig');\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN, MODULE_DEFAULT_CONFIG } from '../../config.config';\r\nimport { getConfigModuleConfig } from '../../reducers';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n\tprivate _config: ConfigModuleConfig;\r\n\tget config() {\r\n\t\treturn this._config;\r\n\t}\r\n\tconfig$ = new BehaviorSubject(this._config);\r\n\r\n\tconstructor(@Inject(MODULE_CONFIG_TOKEN) configFile: ConfigModuleConfig, private store: Store<any>) {\r\n\t\tthis._config = Object.assign({}, MODULE_DEFAULT_CONFIG, configFile);\r\n\t\tthis.config$.next(this._config);\r\n\t\tthis.store.select(getConfigModuleConfig).subscribe((configConfig) => {\r\n\t\t\tif (!configConfig) return;\r\n\t\t\tthis._config = Object.assign({}, this._config, configConfig.Config);\r\n\t\t\tthis.config$.next(this._config);\r\n\t\t});\r\n\t}\r\n}\r\n",
    "export class ConfigModel<T> {\r\n\t_id: string;\r\n\tName: string;\r\n\tConfig: T;\r\n}",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"./config.model\";\r\n\r\nexport module GetConfigsApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n\r\n        constructor(initValue: GetConfigsApiModel.Request = {} as GetConfigsApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            return {\r\n            }\r\n        }\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>[];\r\n        constructor() {\r\n\r\n        }\r\n    }\r\n}",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpRequestBaseModel } from \"@soushians/shared\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ConfigModel } from \"../models\";\r\n\r\nexport module EditConfigApiModel {\r\n\r\n    export class Request implements HttpRequestBaseModel<Request>{\r\n        Name: string;\r\n        Config: {};\r\n        constructor(initValue = {} as EditConfigApiModel.Request) {\r\n            Object.keys(initValue).forEach(key => (this as any)[key] = (initValue as any)[key]);\r\n        }\r\n\r\n        getRequestBody() {\r\n            debugger;\r\n            return {\r\n                Name: this.Name,\r\n                Config: this.Config\r\n            }\r\n        }\r\n        static get formGroup() {\r\n            return new FormGroup({\r\n                Name: new FormControl('', [Validators.required]),\r\n                Config: new FormGroup({}),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    export class Response {\r\n        Result: ConfigModel<any>;\r\n        constructor() {\r\n        }\r\n    }\r\n\r\n}\r\n",
    "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { ConfigState } from \"../reducers\";\r\n\r\ndeclare var c3: any;\r\n\r\nimport { EditConfigApiModel, GetConfigsApiModel, ConfigModel, LayoutConfigModel } from \"../models\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { IntervalObservable } from \"rxjs/observable/IntervalObservable\";\r\nimport { GetConfigAction } from \"../actions\";\r\nimport { ConfigurationService } from \"./module-configuration\";\r\nimport {} from \"../../\";\r\ndeclare var _: any;\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n\tresponseCache: any;\r\n\tconfigsEndpoint: string;\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate store: Store<ConfigState>,\r\n\t\tprivate configurationService: ConfigurationService\r\n\t) {\r\n\t\tthis.configsEndpoint = this.configurationService.config.env.production\r\n\t\t\t? this.configurationService.config.prod_api_host\r\n\t\t\t: this.configurationService.config.dev_api_host;\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.store.dispatch(new GetConfigAction());\r\n\t\t}, 999);\r\n\t}\r\n\r\n\tgetConfigs(): Observable<ConfigModel<any>[]> {\r\n\t\treturn (\r\n\t\t\tthis.http\r\n\t\t\t\t.get(`${this.configsEndpoint}/api/config`)\r\n\t\t\t\t// .filter(() => this.configurationService.config.dev_api_host != undefined)\r\n\t\t\t\t.take(1)\r\n\t\t\t\t.map((response: GetConfigsApiModel.Response) => {\r\n\t\t\t\t\tif (this.configurationService.config.env.production) {\r\n\t\t\t\t\t\tconst dev_api_host = this.configurationService.config.dev_api_host;\r\n\t\t\t\t\t\tconst prod_api_host = this.configurationService.config.prod_api_host;\r\n\t\t\t\t\t\treturn JSON.parse(\r\n\t\t\t\t\t\t\tJSON.stringify(response).replace(new RegExp(dev_api_host, \"g\"), prod_api_host)\r\n\t\t\t\t\t\t).Result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn response.Result;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treturn Observable.throw(err);\r\n\t\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetConfigByName(name: string): Observable<any> {\r\n\t\treturn this.http.get(`${this.configsEndpoint}/api/config/${name}`).map(response => response).catch(err => {\r\n\t\t\treturn Observable.throw(err);\r\n\t\t});\r\n\t}\r\n\teditConfig(body: EditConfigApiModel.Request): Observable<any> {\r\n\t\tvar model = new EditConfigApiModel.Request(body);\r\n\r\n\t\treturn this.http\r\n\t\t\t.put(`${this.configsEndpoint}/api/config/${model.Name}`, model.getRequestBody())\r\n\t\t\t.map(response => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetLayoutConfigs(): Observable<LayoutConfigModel> {\r\n\t\treturn this.http\r\n\t\t\t.get(`${this.configsEndpoint}/api/layout-config`)\r\n\t\t\t.map((response: LayoutConfigModel) => response)\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn Observable.throw(err);\r\n\t\t\t});\r\n\t}\r\n}\r\n",
    "import { NgModule, Component, OnInit, Output, EventEmitter, Input, ViewChild, ViewContainerRef } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\r\n\r\nimport { EditConfigApiModel, PartialConfig } from \"../../models\";\r\nimport { UtilityService } from \"@soushians/infra\";\r\nimport { ConfigService } from \"../../services\";\r\n\r\n@Component({\r\n\tselector: \"config-config-edit\",\r\n\ttemplate: `<div >\r\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"edit()\" fxLayout=\"column\">\r\n    <mat-card>\r\n      <mat-card-content>\r\n          <dynamic-config-component-selector (configChanged)=\"configChanged($event)\" [data]=\"partialConfigModel\"></dynamic-config-component-selector>\r\n      </mat-card-content>\r\n      <mat-card-actions fxLayoutAlign=\"center center\">\r\n        <button fxFlex=\"nogrow\" type=\"submit\" mat-raised-button color=\"primary\" (click)=\"edit\">ویرایش</button>\r\n        <button fxFlex=\"nogrow\" type=\"button\" routerLink=\"/configs\" mat-raised-button>بازگشت</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>\r\n</div>`\r\n})\r\nexport class ConfigEditComponent implements OnInit {\r\n\tconfigInforamation: any;\r\n\tformGroup: FormGroup = EditConfigApiModel.Request.formGroup;\r\n\tpartialConfigModel: PartialConfig;\r\n\r\n\tconstructor(private configService: ConfigService, private formBuilder: FormBuilder, private route: ActivatedRoute) {\r\n\t\tthis.route.params.subscribe((params) => {\r\n\t\t\tconst configName: string = params[\"name\"];\r\n\t\t\tthis.configService.getConfigByName(configName).subscribe((data) => {\r\n\t\t\t\tthis.partialConfigModel = {\r\n\t\t\t\t\ttype: data.Result.Name,\r\n\t\t\t\t\tinputs: {\r\n\t\t\t\t\t\tconfigFormGroup: this.formGroup.controls.Config as FormGroup\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tthis.formGroup.patchValue({\r\n\t\t\t\t\t_id: data.Result._id,\r\n\t\t\t\t\tName: data.Result.Name\r\n\t\t\t\t});\r\n\t\t\t\tObject.keys(data.Result.Config).forEach((key) => {\r\n\t\t\t\t\tthis.addControl(this.formGroup.controls.Config as FormGroup, key, data.Result.Config[key]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\taddControl(formGroup: FormGroup, key: string, value: any) {\r\n\t\tif (value instanceof Array) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.array(value));\r\n\t\t} else if (value instanceof Object) {\r\n\t\t\tformGroup.addControl(key, this.formBuilder.group(value));\r\n\t\t} else {\r\n\t\t\tformGroup.addControl(key, new FormControl(value));\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\tconfigChanged(event: any) {\r\n\t\tdebugger;\r\n\t\tthis.formGroup.controls.Config.patchValue(event);\r\n\t}\r\n\tedit() {\r\n\t\tdebugger;\r\n\t\tif (!this.formGroup.valid) return;\r\n\t\tthis.configService.editConfig(this.formGroup.value).subscribe((config) => {\r\n\t\t\tdebugger;\r\n\t\t});\r\n\t}\r\n}\r\n",
    "import { Component, OnInit } from '@angular/core';\r\nimport { ConfigService } from '../../services';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { GetConfigsApiModel, ConfigModel } from '../../models';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport * as FeatureReducer from '../../reducers';\r\nimport { getConfigs } from '../../reducers';\r\n\r\n@Component({\r\n        selector: 'configs',\r\n        template: `<div fxFlexLayout=\"row\" fxLayoutWrap fxLayoutAlign=\"center center\">\r\n  <mat-card class=\"config-box\" *ngFor=\"let config of (configs | async)\" [fxFlex]=\"50\">\r\n      <h3>\r\n        <a [routerLink]=\"['edit' ,  config.Name]\">\r\n          <mat-icon aria-label=\"edit config\">edit</mat-icon>\r\n        </a>\r\n        {{config.Name}}\r\n      </h3>\r\n  </mat-card>\r\n</div>`,\r\n        styles: [`:host{width:100%}.config-box{margin:15px}`]\r\n})\r\nexport class ConfigsComponent {\r\n        configs: Observable<ConfigModel<any>[]>;\r\n        constructor(\r\n                private configService: ConfigService,\r\n                private store: Store<FeatureReducer.FeatureState>\r\n        ) {\r\n                this.configs = this.store.select(getConfigs);\r\n        }\r\n\r\n}\r\n",
    "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n// import { UserModel } from 'app/models/authentication';\r\nimport { Store } from '@ngrx/store';\r\nimport { ConfigService } from '../../services';\r\n\r\n// import * as appReducer from 'app/reducers';\r\n\r\n@Component({\r\n        selector: 'config-module-container',\r\n        template: `<div fxLayoutAlign=\"\" fxflex=\"100\" fxLayout=\"column\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n`\r\n})\r\nexport class ConfigModuleContainerComponent implements OnInit {\r\n       \r\n        constructor(\r\n               private service : ConfigService\r\n        ) {\r\n          \r\n        }\r\n\r\n        ngOnInit() {\r\n\r\n        }\r\n}\r\n",
    "import {\r\n\tComponent,\r\n\tOnInit,\r\n\tInput,\r\n\tAfterViewInit,\r\n\tComponentFactoryResolver,\r\n\tViewChild,\r\n\tViewContainerRef,\r\n\tReflectiveInjector,\r\n\tOnDestroy,\r\n\tOutput,\r\n\tEventEmitter\r\n} from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { IntervalObservable } from \"rxjs/observable/IntervalObservable\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nimport { AuthenticationModuleConfigComponent } from \"../../dumb-components/authentication-module-config\";\r\nimport { ConfigAppConfigComponent } from \"../../dumb-components/app-config\";\r\nimport { UserModuleConfigComponent } from \"../../dumb-components/user-module-config\";\r\nimport { FormGroup } from \"@angular/forms/src/model\";\r\nimport { PartialConfig } from \"../../models\";\r\nimport { LayoutModuleConfigComponent } from \"../../dumb-components\";\r\n\r\n@Component({\r\n\tselector: \"dynamic-config-component-selector\",\r\n\ttemplate: `<div #dynamicComponentContainer></div>`,\r\n\tstyles: [`:host{width:100%}.diagram-box{margin:15px}.diagram-box .c3{direction:ltr}`],\r\n\tentryComponents: [\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent\r\n\t]\r\n})\r\nexport class DynamicConfigComponentSelectorComponent implements AfterViewInit {\r\n\ttypeMapToDiagram: any = {\r\n\t\tauthentication_module_config: AuthenticationModuleConfigComponent,\r\n\t\tapp_config: ConfigAppConfigComponent,\r\n\t\tuser_module_config: UserModuleConfigComponent,\r\n\t\tlayout_config: LayoutModuleConfigComponent\r\n\t};\r\n\t@ViewChild(\"dynamicComponentContainer\", { read: ViewContainerRef })\r\n\tdynamicComponentContainer: ViewContainerRef;\r\n\t@Output() configChanged = new EventEmitter();\r\n\tcurrentComponent: any = null;\r\n\t@Input()\r\n\tset data(data: PartialConfig) {\r\n\t\tif (!data || Object.keys(data).length == 0) return;\r\n\t\tif (!(data.type in this.typeMapToDiagram)) {\r\n\t\t\tif (this.currentComponent) this.currentComponent.destroy();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet _component: any = this.typeMapToDiagram[data.type];\r\n\t\tlet inputProviders = Object.keys(data.inputs).map((inputName) => {\r\n\t\t\treturn { provide: inputName, useValue: (data.inputs as any)[inputName] };\r\n\t\t});\r\n\t\tlet resolvedInputs = ReflectiveInjector.resolve(inputProviders);\r\n\r\n\t\tlet injector = ReflectiveInjector.fromResolvedProviders(\r\n\t\t\tresolvedInputs,\r\n\t\t\tthis.dynamicComponentContainer.parentInjector\r\n\t\t);\r\n\t\tlet factory = this.resolver.resolveComponentFactory(_component);\r\n\r\n\t\tlet component = factory.create(injector);\r\n\t\t(<any>component.instance).configChanged.subscribe((data: any) => {\r\n\t\t\tthis.configChanged.emit(data);\r\n\t\t});\r\n\t\tthis.dynamicComponentContainer.insert(component.hostView);\r\n\r\n\t\tif (this.currentComponent) {\r\n\t\t\tthis.currentComponent.destroy();\r\n\t\t}\r\n\r\n\t\tthis.currentComponent = component;\r\n\t}\r\n\tconstructor(private resolver: ComponentFactoryResolver) {}\r\n\tngAfterViewInit() {}\r\n}\r\n",
    "import { ModuleWithProviders } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ConfigsComponent, ConfigEditComponent, ConfigModuleContainerComponent } from './smart-components';\r\n\r\nconst routes: Routes = [\r\n        {\r\n                path: 'configs',\r\n                component: ConfigModuleContainerComponent,\r\n                children: [\r\n                        {\r\n                                path: '',\r\n                                component: ConfigsComponent\r\n                        },\r\n                        {\r\n                                path: 'edit/:name',\r\n                                component: ConfigEditComponent\r\n                        }\r\n                ]\r\n        }\r\n];\r\n\r\nexport const RoutingModule: ModuleWithProviders = RouterModule.forChild(routes);\r\n",
    "import \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/mergeMap\";\r\nimport \"rxjs/add/operator/switchMap\";\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { Actions, Effect } from \"@ngrx/effects\";\r\nimport { of } from \"rxjs/observable/of\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\nimport { ConfigActionTypes, ConfigLoadedSucceedAction, ConfigLoadedFailedAction } from \"../actions\";\r\nimport { ConfigService } from \"../services\";\r\nimport { GetConfigsApiModel } from \"../models\";\r\nimport { map, switchMap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class LoadConfigEffects {\r\n\tconstructor(private actions$: Actions<any>, private router: Router, private configService: ConfigService) {}\r\n\r\n\t@Effect()\r\n\tgetConfigs$ = this.actions$\r\n\t\t.ofType(ConfigActionTypes.GET_CONFIGS)\r\n\t\t.pipe(\r\n\t\t\tmap((action) => action.payload),\r\n\t\t\tswitchMap((data: GetConfigsApiModel.Request) => this.configService.getConfigs()),\r\n\t\t\tmap((configs) => new ConfigLoadedSucceedAction(configs)),\r\n\t\t\tcatchError(() => Observable.of(new ConfigLoadedFailedAction()))\r\n\t\t);\r\n}\r\n",
    "import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport {\r\n\tMatIconModule,\r\n\tMatButtonModule,\r\n\tMatCardModule,\r\n\tMatSnackBarModule,\r\n\tMatSidenavModule,\r\n\tMatExpansionModule,\r\n\tMatSelectModule,\r\n\tMatFormFieldModule,\r\n\tMatListModule,\r\n\tMatMenuModule,\r\n\tMatRadioModule,\r\n\tMatInputModule,\r\n\tMatToolbarModule,\r\n\tMatDatepickerModule,\r\n\tMatProgressBarModule,\r\n\tMatSlideToggleModule\r\n} from \"@angular/material\";\r\n\r\nimport { ConfigReducers } from \"./reducers\";\r\nimport {\r\n\tConfigAppConfigComponent,\r\n\tAuthenticationModuleConfigComponent,\r\n\tUserModuleConfigComponent,\r\n\tLayoutModuleConfigComponent\r\n} from \"./dumb-components\";\r\nimport { ConfigService, ConfigurationService } from \"./services\";\r\nimport {\r\n\tConfigModuleContainerComponent,\r\n\tConfigsComponent,\r\n\tConfigEditComponent,\r\n\tDynamicConfigComponentSelectorComponent\r\n} from \"./smart-components\";\r\nimport { RoutingModule } from \"./config.routing-module\";\r\nimport { GetConfigsApiModel } from \"./models\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport * as FeatureReducer from \"./reducers\";\r\nimport { EffectsModule } from \"@ngrx/effects\";\r\n\r\nimport { LoadConfigEffects } from \"./effects\";\r\nimport { ConfigModuleConfig, MODULE_CONFIG_TOKEN } from \"./config.config\";\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tHttpClientModule,\r\n\t\tFlexLayoutModule,\r\n\t\tMatIconModule,\r\n\t\tMatButtonModule,\r\n\t\tMatCardModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatExpansionModule,\r\n\t\tMatSelectModule,\r\n\t\tMatFormFieldModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatRadioModule,\r\n\t\tMatInputModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatProgressBarModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tRoutingModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t],\r\n\tproviders: [],\r\n\texports: [\r\n\t\tConfigsComponent,\r\n\t\tConfigEditComponent,\r\n\t\tConfigAppConfigComponent,\r\n\t\tUserModuleConfigComponent,\r\n\t\tLayoutModuleConfigComponent,\r\n\t\tConfigModuleContainerComponent,\r\n\t\tAuthenticationModuleConfigComponent,\r\n\t\tDynamicConfigComponentSelectorComponent\r\n\t]\r\n})\r\nexport class NgsConfigModule {\r\n\tstatic forRoot(config: ConfigModuleConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: RootNgsConfigModule,\r\n\t\t\tproviders: [ { provide: MODULE_CONFIG_TOKEN, useValue: config }, ConfigurationService, ConfigService ]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tNgsConfigModule,\r\n\t\tStoreModule.forFeature(\"config\", ConfigReducers),\r\n\t\tEffectsModule.forFeature([ LoadConfigEffects ])\r\n\t\t// RoutingModule\r\n\t],\r\n\texports: [ NgsConfigModule ]\r\n})\r\nexport class RootNgsConfigModule {}\r\n"
  ],
  "names": [
    "GetConfigAction",
    "this",
    "type",
    "ConfigActionTypes",
    "payload",
    "ConfigLoadedFailedAction",
    "initialState",
    "data",
    "ConfigReducers",
    "list",
    "state",
    "action",
    "config.ConfigActionTypes",
    "Object",
    "assign",
    "selectConfigState",
    "createFeatureSelector",
    "getConfigListState",
    "createSelector",
    "getConfigs",
    "getAppConfig",
    "find",
    "config",
    "Name",
    "getAuthenticationModuleConfig",
    "getUserModuleConfig",
    "getlayoutModuleConfig",
    "getConfigModuleConfig",
    "getFormModuleConfig",
    "getSocketModuleConfig",
    "ConfigAppConfigComponent",
    "injector",
    "formGroup",
    "FormGroup",
    "AppTitle",
    "FormControl",
    "Validators",
    "required",
    "configChanged",
    "EventEmitter",
    "configFormGroup",
    "get",
    "set",
    "_this",
    "patchValue",
    "value",
    "valueChanges",
    "subscribe",
    "enumerable",
    "configurable",
    "decorators",
    "Component",
    "args",
    "Injector",
    "AuthenticationModuleConfigComponent",
    "endpoints",
    "signIn",
    "signOut",
    "userInformation",
    "forms",
    "_a",
    "formName",
    "formId",
    "LayoutModuleConfigComponent",
    "layoutMode",
    "showLeftNavBar",
    "mainSideNavMode",
    "showMainSidenav",
    "stickyLeftNavBar",
    "showSecondSideNav",
    "secondSideNavMode",
    "menuItems",
    "FormArray",
    "roleItems",
    "sideNavModes",
    "layoutModes",
    "_configFormGroup",
    "controls",
    "forEach",
    "control",
    "push",
    "route",
    "prototype",
    "addMenu",
    "menuItem",
    "icon",
    "roles",
    "UserModuleConfigComponent",
    "changePassword",
    "editProfile",
    "getUserInfo",
    "profileInformation",
    "profile_edit",
    "dashboardLinks",
    "MODULE_DEFAULT_CONFIG",
    "dev_api_host",
    "prod_api_host",
    "env",
    "production",
    "MODULE_CONFIG_TOKEN",
    "InjectionToken",
    "ConfigurationService",
    "configFile",
    "store",
    "config$",
    "BehaviorSubject",
    "_config",
    "next",
    "select",
    "configConfig",
    "Config",
    "ConfigModel",
    "GetConfigsApiModel",
    "Request",
    "initValue",
    "getRequestBody",
    "Response",
    "EditConfigApiModel",
    "ConfigService",
    "http",
    "configurationService",
    "configsEndpoint",
    "setTimeout",
    "dispatch",
    "take",
    "map",
    "response",
    "JSON",
    "parse",
    "stringify",
    "replace",
    "RegExp",
    "Result",
    "catch",
    "err",
    "Observable",
    "throw",
    "getConfigByName",
    "name",
    "editConfig",
    "body",
    "model",
    "put",
    "getLayoutConfigs",
    "Injectable",
    "ConfigEditComponent",
    "configService",
    "formBuilder",
    "params",
    "configName",
    "partialConfigModel",
    "inputs",
    "_id",
    "keys",
    "key",
    "addControl",
    "Array",
    "array",
    "group",
    "event",
    "edit",
    "valid",
    "ConfigsComponent",
    "configs",
    "Store",
    "ConfigModuleContainerComponent",
    "service",
    "ngOnInit",
    "DynamicConfigComponentSelectorComponent",
    "resolver",
    "typeMapToDiagram",
    "authentication_module_config",
    "app_config",
    "user_module_config",
    "layout_config",
    "currentComponent",
    "length",
    "_component",
    "inputProviders",
    "inputName",
    "provide",
    "useValue",
    "resolvedInputs",
    "ReflectiveInjector",
    "resolve",
    "fromResolvedProviders",
    "dynamicComponentContainer",
    "parentInjector",
    "component",
    "resolveComponentFactory",
    "create",
    "emit",
    "insert",
    "hostView",
    "destroy",
    "ngAfterViewInit",
    "selector",
    "template",
    "styles",
    "routes",
    "path",
    "children",
    "RoutingModule",
    "RouterModule",
    "forChild",
    "LoadConfigEffects",
    "actions$",
    "router",
    "getConfigs$",
    "ofType",
    "pipe",
    "switchMap",
    "ConfigLoadedSucceedAction",
    "catchError",
    "of",
    "ctorParameters",
    "NgsConfigModule",
    "forRoot",
    "ngModule",
    "RootNgsConfigModule",
    "providers",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "ReactiveFormsModule",
    "HttpClientModule",
    "FlexLayoutModule",
    "MatIconModule",
    "MatButtonModule",
    "MatCardModule",
    "MatSnackBarModule",
    "MatSidenavModule",
    "MatExpansionModule",
    "MatSelectModule",
    "MatFormFieldModule",
    "MatListModule",
    "MatMenuModule",
    "MatRadioModule",
    "MatInputModule",
    "MatSlideToggleModule",
    "MatToolbarModule",
    "MatDatepickerModule",
    "MatProgressBarModule",
    "BrowserAnimationsModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}

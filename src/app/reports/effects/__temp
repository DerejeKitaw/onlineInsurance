import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/observable/of';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import { Action } from '@ngrx/store';
import { Actions, Effect, toPayload } from '@ngrx/effects';

import { ReportModuleDefinition } from "../reports.global"

import {
        MonthlyReportReportAction, MonthlyReportReportActionTypes,
        FetchMonthlyReportReportStartAction, FetchMonthlyReportReportSucceedAction, FetchMonthlyReportReportFailedAction
} from '../actions';
import { ReportService } from "../services";

@Injectable()
export class MonthlyReportReportEffects {

        constructor(
                private actions$: Actions<any>,
                private router: Router,
                private reportsService: ReportService
        ) { }

        @Effect()
        canFetchMonthlyReportReport$ = this.actions$
                .ofType(MonthlyReportReportActionTypes.FETCH_MONTHLY_REPORTS_REPORT)
                .map(toPayload)
                .map((data) => new FetchMonthlyReportReportStartAction(data))

        @Effect()
        monthlyReportReportFetch$ = this.actions$
                .ofType(MonthlyReportReportActionTypes.FETCH_MONTHLY_REPORTS_REPORT_START)
                .map(toPayload)
                .switchMap((data) => {
                        return this.reportsService.monthlyReoport(data)
                                .map(res => new FetchMonthlyReportReportSucceedAction(res))
                                .catch(error => Observable.of(new FetchMonthlyReportReportFailedAction()))
                })

}

ReportModuleDefinition.effects.push(MonthlyReportReportEffects);